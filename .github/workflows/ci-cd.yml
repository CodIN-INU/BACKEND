name: CODIN MSA CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: codin-msa

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        # Test Environment Variables
        SPRING_PROFILES_ACTIVE=test
        
        # Database
        MONGODB_URI=mongodb://admin:password@localhost:27017/codin-test?authSource=admin
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        
        # JWT
        JWT_SECRET=test-secret-key-for-testing-purposes-only
        JWT_EXPIRATION=86400000
        JWT_REFRESH_EXPIRATION=604800000
        
        # Eureka (disabled for tests)
        EUREKA_CLIENT_ENABLED=false
        
        # Logging
        LOGGING_LEVEL_ROOT=INFO
        EOF

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: '**/build/test-results/test/TEST-*.xml'
        reporter: java-junit

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: 
          - auth-service
          - user-service
          - content-service
          - notification-service
          - chat-service
          - api-gateway

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build JAR
      run: ./gradlew :modules:codin-${{ matrix.service }}:build -x test

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./modules/codin-${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create staging environment file
      run: |
        cat > .env.staging << EOF
        # Staging Environment Variables
        SPRING_PROFILES_ACTIVE=staging
        
        # Database
        MONGODB_URI=${{ secrets.STAGING_MONGODB_URI }}
        REDIS_HOST=${{ secrets.STAGING_REDIS_HOST }}
        REDIS_PORT=${{ secrets.STAGING_REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}
        
        # JWT
        JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
        JWT_EXPIRATION=86400000
        JWT_REFRESH_EXPIRATION=604800000
        
        # AWS S3
        AWS_S3_BUCKET=${{ secrets.STAGING_AWS_S3_BUCKET }}
        AWS_S3_REGION=${{ secrets.STAGING_AWS_S3_REGION }}
        AWS_ACCESS_KEY=${{ secrets.STAGING_AWS_ACCESS_KEY }}
        AWS_SECRET_KEY=${{ secrets.STAGING_AWS_SECRET_KEY }}
        
        # Email
        MAIL_HOST=${{ secrets.STAGING_MAIL_HOST }}
        MAIL_PORT=${{ secrets.STAGING_MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.STAGING_MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.STAGING_MAIL_PASSWORD }}
        
        # FCM
        FCM_SERVICE_ACCOUNT_KEY=${{ secrets.STAGING_FCM_SERVICE_ACCOUNT_KEY }}
        
        # CORS
        CORS_ALLOWED_ORIGINS=${{ secrets.STAGING_CORS_ALLOWED_ORIGINS }}
        
        # WebSocket
        WEBSOCKET_ALLOWED_ORIGINS=${{ secrets.STAGING_WEBSOCKET_ALLOWED_ORIGINS }}
        EOF

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, using docker-compose or kubectl

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create production environment file
      run: |
        cat > .env.production << EOF
        # Production Environment Variables
        SPRING_PROFILES_ACTIVE=production
        
        # Database
        MONGODB_URI=${{ secrets.PROD_MONGODB_URI }}
        REDIS_HOST=${{ secrets.PROD_REDIS_HOST }}
        REDIS_PORT=${{ secrets.PROD_REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
        
        # JWT
        JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
        JWT_EXPIRATION=86400000
        JWT_REFRESH_EXPIRATION=604800000
        
        # AWS S3
        AWS_S3_BUCKET=${{ secrets.PROD_AWS_S3_BUCKET }}
        AWS_S3_REGION=${{ secrets.PROD_AWS_S3_REGION }}
        AWS_ACCESS_KEY=${{ secrets.PROD_AWS_ACCESS_KEY }}
        AWS_SECRET_KEY=${{ secrets.PROD_AWS_SECRET_KEY }}
        
        # Email
        MAIL_HOST=${{ secrets.PROD_MAIL_HOST }}
        MAIL_PORT=${{ secrets.PROD_MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.PROD_MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.PROD_MAIL_PASSWORD }}
        
        # FCM
        FCM_SERVICE_ACCOUNT_KEY=${{ secrets.PROD_FCM_SERVICE_ACCOUNT_KEY }}
        
        # CORS
        CORS_ALLOWED_ORIGINS=${{ secrets.PROD_CORS_ALLOWED_ORIGINS }}
        
        # WebSocket
        WEBSOCKET_ALLOWED_ORIGINS=${{ secrets.PROD_WEBSOCKET_ALLOWED_ORIGINS }}
        EOF

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example, using docker-compose or kubectl

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
